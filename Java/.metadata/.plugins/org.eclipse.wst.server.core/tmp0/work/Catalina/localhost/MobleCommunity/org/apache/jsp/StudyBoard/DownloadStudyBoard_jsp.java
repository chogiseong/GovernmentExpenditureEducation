/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-07-27 04:31:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.StudyBoard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.URLEncoder;
import java.io.FileInputStream;
import java.io.File;
import Moble.*;

public final class DownloadStudyBoard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("Moble");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("java.io.FileInputStream");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   ");

       // a태그의 href로 fileDown1.jsp?file_name="<%=fileName1 을 통해 전달한
       // 중복 방지 처리한 파일명 값을 가져온다.
       request.setCharacterEncoding("UTF-8"); 
       //String fileName = request.getParameter("up_task");
       
       String fileName = request.getParameter("filename");
	
	   StudyBoardVO vo = new StudyBoardVO(fileName);
		
	   DAO dao = new DAOImpl();
		
	   dao.selectStudyBoard(vo.getFile());
		
	   //response.sendRedirect("StudyBoard.jsp");
		
	   dao.selectStudyBoard(vo.getFile());
       
       // 업로드한 폴더의 위치와 업로드 폴더의 이름을 알아야 한다.
       String savePath ="Download";// WebContent/uploadFile
       // 위의 폴더는 상대경로이고 절대경로 기준의 진짜 경로를 구해와야한다.
       String sDownPath = request.getRealPath(savePath);      
        
       // 저장되어 있는 폴더경로/저장된 파일명 으로 풀 path를 만들어준다.
           // 자바에서는 \를 표시하기 위해서는 \를 한번 더 붙여주기 때문에 \\로 해준다.
       String sFilePath = sDownPath +"\\" + fileName;// ex)c:\\uploadPath\\image.jpg
////////////////////////////* 밑에 1줄 나중에 지우기*/
       
       // 풀 path에 대한걸 파일 객체로 인식시킨다.
       File outputFile = new File(sFilePath);
       // 저장된 파일을 읽어와 저장할 버퍼를 임시로 만들고 버퍼의 용량은 이전에 한번에 업로드할 수 있는 파일크기로 지정한다.
       byte[] temp =new byte[1024*1024*10];// 10M
        
       // 파일을 읽어와야 함으로 inputStream을 연다.(풀패스를 가지는 파일 객체를 이용해 input스트림을 형성한다.)
       FileInputStream in =new FileInputStream(outputFile);
        
       // 유형 확인 : 읽어올 경로의 파일의 유형 -> 페이지 생성할 때 타입을 설정해야 한다.
       String sMimeType = getServletContext().getMimeType(sFilePath);       
        
       // 지정되지 않은 유형 예외처리
       if ( sMimeType ==null ){
           // 관례적인 표현
           sMimeType ="application.octec-stream";// 일련된 8bit 스트림 형식
           // 유형이 알려지지 않은 파일에 대한 읽기 형식 지정
       }
        
       // 파일 다운로드 시작
       // 유형을 지정해 준다.      
       // 파일 mime 타입으로 지정해 준다.       
       
      // 업로드 파일의 제목이 깨질 수 있으므로 인코딩을 해준다.
      String sEncoding = java.net.URLEncoder.encode(fileName, "UTF-8");      
      response.setContentType("application/octer-stream");      
      response.setHeader("Content-Transper-Encoding", "binary");      
              
       // 기타 내용을 헤더에 올려야 한다.
       // 기타 내용을 보고 브라우저에서 다운로드 시 화면에 출력시켜 준다.
       String AA ="Content-Disposition";
       String BB ="attachment;filename="+sEncoding;
       response.setHeader(AA,BB);
        
       // 브라우저에 쓰기
       ServletOutputStream out2 = response.getOutputStream();
        
       int numRead =0;
        
       // 바이트 배열 temp의 0번부터 numRead번까지 브라우저로 출력
           // 파일이 위치한 곳에 연결된 inputStream에서 읽되 끝(-1) 전까지 while을 돈다.
       while((numRead = in.read(temp,0,temp.length)) != -1){// temp 배열에 읽어올건데 0번째 인덱스부터 한번에 최대 temp.length 만큼 읽어온다.
           // 읽어올게 더이상 없으면 -1을 리턴하면서 while문을 빠져나감
            
           // 브라우저에 출력 : 근대 header 정보를 attachment로 해놓았음으로 다운로드가 된다.
           out2.write(temp,0,numRead);// temp배열에 있는 데이터의 0번째부터 최대 numRead만큼 출력한다.
       }
       // 자원 해제
       out2.flush();
       out2.close();
       in.close();
   
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
